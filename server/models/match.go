// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Match is an object representing the database table.
type Match struct {
	ID          string `boil:"id" json:"id" toml:"id" yaml:"id"`
	EntryID     string `boil:"entry_id" json:"entry_id" toml:"entry_id" yaml:"entry_id"`
	ContestID   string `boil:"contest_id" json:"contest_id" toml:"contest_id" yaml:"contest_id"`
	Rank        int64  `boil:"rank" json:"rank" toml:"rank" yaml:"rank"`
	BeforeScore int64  `boil:"before_score" json:"before_score" toml:"before_score" yaml:"before_score"`
	AfterScore  int64  `boil:"after_score" json:"after_score" toml:"after_score" yaml:"after_score"`

	R *matchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchColumns = struct {
	ID          string
	EntryID     string
	ContestID   string
	Rank        string
	BeforeScore string
	AfterScore  string
}{
	ID:          "id",
	EntryID:     "entry_id",
	ContestID:   "contest_id",
	Rank:        "rank",
	BeforeScore: "before_score",
	AfterScore:  "after_score",
}

var MatchTableColumns = struct {
	ID          string
	EntryID     string
	ContestID   string
	Rank        string
	BeforeScore string
	AfterScore  string
}{
	ID:          "match.id",
	EntryID:     "match.entry_id",
	ContestID:   "match.contest_id",
	Rank:        "match.rank",
	BeforeScore: "match.before_score",
	AfterScore:  "match.after_score",
}

// Generated where

var MatchWhere = struct {
	ID          whereHelperstring
	EntryID     whereHelperstring
	ContestID   whereHelperstring
	Rank        whereHelperint64
	BeforeScore whereHelperint64
	AfterScore  whereHelperint64
}{
	ID:          whereHelperstring{field: "\"match\".\"id\""},
	EntryID:     whereHelperstring{field: "\"match\".\"entry_id\""},
	ContestID:   whereHelperstring{field: "\"match\".\"contest_id\""},
	Rank:        whereHelperint64{field: "\"match\".\"rank\""},
	BeforeScore: whereHelperint64{field: "\"match\".\"before_score\""},
	AfterScore:  whereHelperint64{field: "\"match\".\"after_score\""},
}

// MatchRels is where relationship names are stored.
var MatchRels = struct {
	Contest string
	Entry   string
}{
	Contest: "Contest",
	Entry:   "Entry",
}

// matchR is where relationships are stored.
type matchR struct {
	Contest *Contest `boil:"Contest" json:"Contest" toml:"Contest" yaml:"Contest"`
	Entry   *Entry   `boil:"Entry" json:"Entry" toml:"Entry" yaml:"Entry"`
}

// NewStruct creates a new relationship struct
func (*matchR) NewStruct() *matchR {
	return &matchR{}
}

func (r *matchR) GetContest() *Contest {
	if r == nil {
		return nil
	}
	return r.Contest
}

func (r *matchR) GetEntry() *Entry {
	if r == nil {
		return nil
	}
	return r.Entry
}

// matchL is where Load methods for each relationship are stored.
type matchL struct{}

var (
	matchAllColumns            = []string{"id", "entry_id", "contest_id", "rank", "before_score", "after_score"}
	matchColumnsWithoutDefault = []string{"id", "entry_id", "contest_id", "rank", "before_score", "after_score"}
	matchColumnsWithDefault    = []string{}
	matchPrimaryKeyColumns     = []string{"id"}
	matchGeneratedColumns      = []string{}
)

type (
	// MatchSlice is an alias for a slice of pointers to Match.
	// This should almost always be used instead of []Match.
	MatchSlice []*Match
	// MatchHook is the signature for custom Match hook methods
	MatchHook func(context.Context, boil.ContextExecutor, *Match) error

	matchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchType                 = reflect.TypeOf(&Match{})
	matchMapping              = queries.MakeStructMapping(matchType)
	matchPrimaryKeyMapping, _ = queries.BindMapping(matchType, matchMapping, matchPrimaryKeyColumns)
	matchInsertCacheMut       sync.RWMutex
	matchInsertCache          = make(map[string]insertCache)
	matchUpdateCacheMut       sync.RWMutex
	matchUpdateCache          = make(map[string]updateCache)
	matchUpsertCacheMut       sync.RWMutex
	matchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var matchAfterSelectHooks []MatchHook

var matchBeforeInsertHooks []MatchHook
var matchAfterInsertHooks []MatchHook

var matchBeforeUpdateHooks []MatchHook
var matchAfterUpdateHooks []MatchHook

var matchBeforeDeleteHooks []MatchHook
var matchAfterDeleteHooks []MatchHook

var matchBeforeUpsertHooks []MatchHook
var matchAfterUpsertHooks []MatchHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Match) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Match) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Match) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Match) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Match) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Match) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Match) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Match) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Match) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMatchHook registers your hook function for all future operations.
func AddMatchHook(hookPoint boil.HookPoint, matchHook MatchHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		matchAfterSelectHooks = append(matchAfterSelectHooks, matchHook)
	case boil.BeforeInsertHook:
		matchBeforeInsertHooks = append(matchBeforeInsertHooks, matchHook)
	case boil.AfterInsertHook:
		matchAfterInsertHooks = append(matchAfterInsertHooks, matchHook)
	case boil.BeforeUpdateHook:
		matchBeforeUpdateHooks = append(matchBeforeUpdateHooks, matchHook)
	case boil.AfterUpdateHook:
		matchAfterUpdateHooks = append(matchAfterUpdateHooks, matchHook)
	case boil.BeforeDeleteHook:
		matchBeforeDeleteHooks = append(matchBeforeDeleteHooks, matchHook)
	case boil.AfterDeleteHook:
		matchAfterDeleteHooks = append(matchAfterDeleteHooks, matchHook)
	case boil.BeforeUpsertHook:
		matchBeforeUpsertHooks = append(matchBeforeUpsertHooks, matchHook)
	case boil.AfterUpsertHook:
		matchAfterUpsertHooks = append(matchAfterUpsertHooks, matchHook)
	}
}

// OneG returns a single match record from the query using the global executor.
func (q matchQuery) OneG(ctx context.Context) (*Match, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single match record from the query.
func (q matchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Match, error) {
	o := &Match{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for match")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Match records from the query using the global executor.
func (q matchQuery) AllG(ctx context.Context) (MatchSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Match records from the query.
func (q matchQuery) All(ctx context.Context, exec boil.ContextExecutor) (MatchSlice, error) {
	var o []*Match

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Match slice")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Match records in the query using the global executor
func (q matchQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Match records in the query.
func (q matchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count match rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q matchQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q matchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if match exists")
	}

	return count > 0, nil
}

// Contest pointed to by the foreign key.
func (o *Match) Contest(mods ...qm.QueryMod) contestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContestID),
	}

	queryMods = append(queryMods, mods...)

	return Contests(queryMods...)
}

// Entry pointed to by the foreign key.
func (o *Match) Entry(mods ...qm.QueryMod) entryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EntryID),
	}

	queryMods = append(queryMods, mods...)

	return Entries(queryMods...)
}

// LoadContest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchL) LoadContest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMatch interface{}, mods queries.Applicator) error {
	var slice []*Match
	var object *Match

	if singular {
		var ok bool
		object, ok = maybeMatch.(*Match)
		if !ok {
			object = new(Match)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatch))
			}
		}
	} else {
		s, ok := maybeMatch.(*[]*Match)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatch))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &matchR{}
		}
		args = append(args, object.ContestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchR{}
			}

			for _, a := range args {
				if a == obj.ContestID {
					continue Outer
				}
			}

			args = append(args, obj.ContestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`contest`),
		qm.WhereIn(`contest.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Contest")
	}

	var resultSlice []*Contest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Contest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contest")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contest")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Contest = foreign
		if foreign.R == nil {
			foreign.R = &contestR{}
		}
		foreign.R.Matches = append(foreign.R.Matches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContestID == foreign.ID {
				local.R.Contest = foreign
				if foreign.R == nil {
					foreign.R = &contestR{}
				}
				foreign.R.Matches = append(foreign.R.Matches, local)
				break
			}
		}
	}

	return nil
}

// LoadEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchL) LoadEntry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMatch interface{}, mods queries.Applicator) error {
	var slice []*Match
	var object *Match

	if singular {
		var ok bool
		object, ok = maybeMatch.(*Match)
		if !ok {
			object = new(Match)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatch))
			}
		}
	} else {
		s, ok := maybeMatch.(*[]*Match)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatch)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatch))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &matchR{}
		}
		args = append(args, object.EntryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchR{}
			}

			for _, a := range args {
				if a == obj.EntryID {
					continue Outer
				}
			}

			args = append(args, obj.EntryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`entry`),
		qm.WhereIn(`entry.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Entry")
	}

	var resultSlice []*Entry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Entry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for entry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entry")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Entry = foreign
		if foreign.R == nil {
			foreign.R = &entryR{}
		}
		foreign.R.Matches = append(foreign.R.Matches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EntryID == foreign.ID {
				local.R.Entry = foreign
				if foreign.R == nil {
					foreign.R = &entryR{}
				}
				foreign.R.Matches = append(foreign.R.Matches, local)
				break
			}
		}
	}

	return nil
}

// SetContestG of the match to the related item.
// Sets o.R.Contest to related.
// Adds o to related.R.Matches.
// Uses the global database handle.
func (o *Match) SetContestG(ctx context.Context, insert bool, related *Contest) error {
	return o.SetContest(ctx, boil.GetContextDB(), insert, related)
}

// SetContest of the match to the related item.
// Sets o.R.Contest to related.
// Adds o to related.R.Matches.
func (o *Match) SetContest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Contest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"contest_id"}),
		strmangle.WhereClause("\"", "\"", 0, matchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContestID = related.ID
	if o.R == nil {
		o.R = &matchR{
			Contest: related,
		}
	} else {
		o.R.Contest = related
	}

	if related.R == nil {
		related.R = &contestR{
			Matches: MatchSlice{o},
		}
	} else {
		related.R.Matches = append(related.R.Matches, o)
	}

	return nil
}

// SetEntryG of the match to the related item.
// Sets o.R.Entry to related.
// Adds o to related.R.Matches.
// Uses the global database handle.
func (o *Match) SetEntryG(ctx context.Context, insert bool, related *Entry) error {
	return o.SetEntry(ctx, boil.GetContextDB(), insert, related)
}

// SetEntry of the match to the related item.
// Sets o.R.Entry to related.
// Adds o to related.R.Matches.
func (o *Match) SetEntry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Entry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"entry_id"}),
		strmangle.WhereClause("\"", "\"", 0, matchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EntryID = related.ID
	if o.R == nil {
		o.R = &matchR{
			Entry: related,
		}
	} else {
		o.R.Entry = related
	}

	if related.R == nil {
		related.R = &entryR{
			Matches: MatchSlice{o},
		}
	} else {
		related.R.Matches = append(related.R.Matches, o)
	}

	return nil
}

// Matches retrieves all the records using an executor.
func Matches(mods ...qm.QueryMod) matchQuery {
	mods = append(mods, qm.From("\"match\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match\".*"})
	}

	return matchQuery{q}
}

// FindMatchG retrieves a single record by ID.
func FindMatchG(ctx context.Context, iD string, selectCols ...string) (*Match, error) {
	return FindMatch(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMatch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatch(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Match, error) {
	matchObj := &Match{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, matchObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from match")
	}

	if err = matchObj.doAfterSelectHooks(ctx, exec); err != nil {
		return matchObj, err
	}

	return matchObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Match) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Match) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no match provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchInsertCacheMut.RLock()
	cache, cached := matchInsertCache[key]
	matchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchAllColumns,
			matchColumnsWithDefault,
			matchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchType, matchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchType, matchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into match")
	}

	if !cached {
		matchInsertCacheMut.Lock()
		matchInsertCache[key] = cache
		matchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Match record using the global executor.
// See Update for more documentation.
func (o *Match) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Match.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Match) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	matchUpdateCacheMut.RLock()
	cache, cached := matchUpdateCache[key]
	matchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchAllColumns,
			matchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update match, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, matchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchType, matchMapping, append(wl, matchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update match row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for match")
	}

	if !cached {
		matchUpdateCacheMut.Lock()
		matchUpdateCache[key] = cache
		matchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q matchQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q matchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for match")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for match")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MatchSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, matchPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in match slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all match")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Match) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Match) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no match provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matchColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchUpsertCacheMut.RLock()
	cache, cached := matchUpsertCache[key]
	matchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			matchAllColumns,
			matchColumnsWithDefault,
			matchColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			matchAllColumns,
			matchPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert match, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(matchPrimaryKeyColumns))
			copy(conflict, matchPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"match\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(matchType, matchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchType, matchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert match")
	}

	if !cached {
		matchUpsertCacheMut.Lock()
		matchUpsertCache[key] = cache
		matchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Match record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Match) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Match record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Match) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Match provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchPrimaryKeyMapping)
	sql := "DELETE FROM \"match\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from match")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for match")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q matchQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q matchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no matchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from match")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for match")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MatchSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(matchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, matchPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from match slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for match")
	}

	if len(matchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Match) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Match provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Match) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMatch(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MatchSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match\".* FROM \"match\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, matchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MatchSlice")
	}

	*o = slice

	return nil
}

// MatchExistsG checks if the Match row exists.
func MatchExistsG(ctx context.Context, iD string) (bool, error) {
	return MatchExists(ctx, boil.GetContextDB(), iD)
}

// MatchExists checks if the Match row exists.
func MatchExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if match exists")
	}

	return exists, nil
}
