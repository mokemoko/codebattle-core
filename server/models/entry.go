// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Entry is an object representing the database table.
type Entry struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ContestID  string      `boil:"contest_id" json:"contest_id" toml:"contest_id" yaml:"contest_id"`
	Name       string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Repository string      `boil:"repository" json:"repository" toml:"repository" yaml:"repository"`
	Status     int64       `boil:"status" json:"status" toml:"status" yaml:"status"`
	Error      null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`

	R *entryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L entryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EntryColumns = struct {
	ID         string
	UserID     string
	ContestID  string
	Name       string
	Repository string
	Status     string
	Error      string
}{
	ID:         "id",
	UserID:     "user_id",
	ContestID:  "contest_id",
	Name:       "name",
	Repository: "repository",
	Status:     "status",
	Error:      "error",
}

var EntryTableColumns = struct {
	ID         string
	UserID     string
	ContestID  string
	Name       string
	Repository string
	Status     string
	Error      string
}{
	ID:         "entry.id",
	UserID:     "entry.user_id",
	ContestID:  "entry.contest_id",
	Name:       "entry.name",
	Repository: "entry.repository",
	Status:     "entry.status",
	Error:      "entry.error",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var EntryWhere = struct {
	ID         whereHelperstring
	UserID     whereHelperstring
	ContestID  whereHelperstring
	Name       whereHelperstring
	Repository whereHelperstring
	Status     whereHelperint64
	Error      whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"entry\".\"id\""},
	UserID:     whereHelperstring{field: "\"entry\".\"user_id\""},
	ContestID:  whereHelperstring{field: "\"entry\".\"contest_id\""},
	Name:       whereHelperstring{field: "\"entry\".\"name\""},
	Repository: whereHelperstring{field: "\"entry\".\"repository\""},
	Status:     whereHelperint64{field: "\"entry\".\"status\""},
	Error:      whereHelpernull_String{field: "\"entry\".\"error\""},
}

// EntryRels is where relationship names are stored.
var EntryRels = struct {
	Contest string
	User    string
	Matches string
}{
	Contest: "Contest",
	User:    "User",
	Matches: "Matches",
}

// entryR is where relationships are stored.
type entryR struct {
	Contest *Contest   `boil:"Contest" json:"Contest" toml:"Contest" yaml:"Contest"`
	User    *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
	Matches MatchSlice `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
}

// NewStruct creates a new relationship struct
func (*entryR) NewStruct() *entryR {
	return &entryR{}
}

func (r *entryR) GetContest() *Contest {
	if r == nil {
		return nil
	}
	return r.Contest
}

func (r *entryR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *entryR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.Matches
}

// entryL is where Load methods for each relationship are stored.
type entryL struct{}

var (
	entryAllColumns            = []string{"id", "user_id", "contest_id", "name", "repository", "status", "error"}
	entryColumnsWithoutDefault = []string{"id", "user_id", "contest_id", "name", "repository", "status"}
	entryColumnsWithDefault    = []string{"error"}
	entryPrimaryKeyColumns     = []string{"id"}
	entryGeneratedColumns      = []string{}
)

type (
	// EntrySlice is an alias for a slice of pointers to Entry.
	// This should almost always be used instead of []Entry.
	EntrySlice []*Entry
	// EntryHook is the signature for custom Entry hook methods
	EntryHook func(context.Context, boil.ContextExecutor, *Entry) error

	entryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	entryType                 = reflect.TypeOf(&Entry{})
	entryMapping              = queries.MakeStructMapping(entryType)
	entryPrimaryKeyMapping, _ = queries.BindMapping(entryType, entryMapping, entryPrimaryKeyColumns)
	entryInsertCacheMut       sync.RWMutex
	entryInsertCache          = make(map[string]insertCache)
	entryUpdateCacheMut       sync.RWMutex
	entryUpdateCache          = make(map[string]updateCache)
	entryUpsertCacheMut       sync.RWMutex
	entryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var entryAfterSelectHooks []EntryHook

var entryBeforeInsertHooks []EntryHook
var entryAfterInsertHooks []EntryHook

var entryBeforeUpdateHooks []EntryHook
var entryAfterUpdateHooks []EntryHook

var entryBeforeDeleteHooks []EntryHook
var entryAfterDeleteHooks []EntryHook

var entryBeforeUpsertHooks []EntryHook
var entryAfterUpsertHooks []EntryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Entry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Entry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Entry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Entry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Entry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Entry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Entry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Entry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Entry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range entryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEntryHook registers your hook function for all future operations.
func AddEntryHook(hookPoint boil.HookPoint, entryHook EntryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		entryAfterSelectHooks = append(entryAfterSelectHooks, entryHook)
	case boil.BeforeInsertHook:
		entryBeforeInsertHooks = append(entryBeforeInsertHooks, entryHook)
	case boil.AfterInsertHook:
		entryAfterInsertHooks = append(entryAfterInsertHooks, entryHook)
	case boil.BeforeUpdateHook:
		entryBeforeUpdateHooks = append(entryBeforeUpdateHooks, entryHook)
	case boil.AfterUpdateHook:
		entryAfterUpdateHooks = append(entryAfterUpdateHooks, entryHook)
	case boil.BeforeDeleteHook:
		entryBeforeDeleteHooks = append(entryBeforeDeleteHooks, entryHook)
	case boil.AfterDeleteHook:
		entryAfterDeleteHooks = append(entryAfterDeleteHooks, entryHook)
	case boil.BeforeUpsertHook:
		entryBeforeUpsertHooks = append(entryBeforeUpsertHooks, entryHook)
	case boil.AfterUpsertHook:
		entryAfterUpsertHooks = append(entryAfterUpsertHooks, entryHook)
	}
}

// OneG returns a single entry record from the query using the global executor.
func (q entryQuery) OneG(ctx context.Context) (*Entry, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single entry record from the query.
func (q entryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Entry, error) {
	o := &Entry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for entry")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Entry records from the query using the global executor.
func (q entryQuery) AllG(ctx context.Context) (EntrySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Entry records from the query.
func (q entryQuery) All(ctx context.Context, exec boil.ContextExecutor) (EntrySlice, error) {
	var o []*Entry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Entry slice")
	}

	if len(entryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Entry records in the query using the global executor
func (q entryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Entry records in the query.
func (q entryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count entry rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q entryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q entryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if entry exists")
	}

	return count > 0, nil
}

// Contest pointed to by the foreign key.
func (o *Entry) Contest(mods ...qm.QueryMod) contestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContestID),
	}

	queryMods = append(queryMods, mods...)

	return Contests(queryMods...)
}

// User pointed to by the foreign key.
func (o *Entry) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Matches retrieves all the match's Matches with an executor.
func (o *Entry) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match\".\"entry_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// LoadContest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (entryL) LoadContest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEntry interface{}, mods queries.Applicator) error {
	var slice []*Entry
	var object *Entry

	if singular {
		var ok bool
		object, ok = maybeEntry.(*Entry)
		if !ok {
			object = new(Entry)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEntry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEntry))
			}
		}
	} else {
		s, ok := maybeEntry.(*[]*Entry)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEntry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEntry))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &entryR{}
		}
		args = append(args, object.ContestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &entryR{}
			}

			for _, a := range args {
				if a == obj.ContestID {
					continue Outer
				}
			}

			args = append(args, obj.ContestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`contest`),
		qm.WhereIn(`contest.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Contest")
	}

	var resultSlice []*Contest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Contest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for contest")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contest")
	}

	if len(entryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Contest = foreign
		if foreign.R == nil {
			foreign.R = &contestR{}
		}
		foreign.R.Entries = append(foreign.R.Entries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContestID == foreign.ID {
				local.R.Contest = foreign
				if foreign.R == nil {
					foreign.R = &contestR{}
				}
				foreign.R.Entries = append(foreign.R.Entries, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (entryL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEntry interface{}, mods queries.Applicator) error {
	var slice []*Entry
	var object *Entry

	if singular {
		var ok bool
		object, ok = maybeEntry.(*Entry)
		if !ok {
			object = new(Entry)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEntry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEntry))
			}
		}
	} else {
		s, ok := maybeEntry.(*[]*Entry)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEntry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEntry))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &entryR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &entryR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(entryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Entries = append(foreign.R.Entries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Entries = append(foreign.R.Entries, local)
				break
			}
		}
	}

	return nil
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (entryL) LoadMatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEntry interface{}, mods queries.Applicator) error {
	var slice []*Entry
	var object *Entry

	if singular {
		var ok bool
		object, ok = maybeEntry.(*Entry)
		if !ok {
			object = new(Entry)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEntry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEntry))
			}
		}
	} else {
		s, ok := maybeEntry.(*[]*Entry)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEntry)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEntry))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &entryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &entryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`match`),
		qm.WhereIn(`match.entry_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Entry = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EntryID {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Entry = local
				break
			}
		}
	}

	return nil
}

// SetContestG of the entry to the related item.
// Sets o.R.Contest to related.
// Adds o to related.R.Entries.
// Uses the global database handle.
func (o *Entry) SetContestG(ctx context.Context, insert bool, related *Contest) error {
	return o.SetContest(ctx, boil.GetContextDB(), insert, related)
}

// SetContest of the entry to the related item.
// Sets o.R.Contest to related.
// Adds o to related.R.Entries.
func (o *Entry) SetContest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Contest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"entry\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"contest_id"}),
		strmangle.WhereClause("\"", "\"", 0, entryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContestID = related.ID
	if o.R == nil {
		o.R = &entryR{
			Contest: related,
		}
	} else {
		o.R.Contest = related
	}

	if related.R == nil {
		related.R = &contestR{
			Entries: EntrySlice{o},
		}
	} else {
		related.R.Entries = append(related.R.Entries, o)
	}

	return nil
}

// SetUserG of the entry to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Entries.
// Uses the global database handle.
func (o *Entry) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the entry to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Entries.
func (o *Entry) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"entry\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 0, entryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &entryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Entries: EntrySlice{o},
		}
	} else {
		related.R.Entries = append(related.R.Entries, o)
	}

	return nil
}

// AddMatchesG adds the given related objects to the existing relationships
// of the entry, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Entry appropriately.
// Uses the global database handle.
func (o *Entry) AddMatchesG(ctx context.Context, insert bool, related ...*Match) error {
	return o.AddMatches(ctx, boil.GetContextDB(), insert, related...)
}

// AddMatches adds the given related objects to the existing relationships
// of the entry, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Entry appropriately.
func (o *Entry) AddMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EntryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"entry_id"}),
				strmangle.WhereClause("\"", "\"", 0, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EntryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &entryR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Entry: o,
			}
		} else {
			rel.R.Entry = o
		}
	}
	return nil
}

// Entries retrieves all the records using an executor.
func Entries(mods ...qm.QueryMod) entryQuery {
	mods = append(mods, qm.From("\"entry\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"entry\".*"})
	}

	return entryQuery{q}
}

// FindEntryG retrieves a single record by ID.
func FindEntryG(ctx context.Context, iD string, selectCols ...string) (*Entry, error) {
	return FindEntry(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEntry(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Entry, error) {
	entryObj := &Entry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"entry\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, entryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from entry")
	}

	if err = entryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return entryObj, err
	}

	return entryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Entry) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Entry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no entry provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(entryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	entryInsertCacheMut.RLock()
	cache, cached := entryInsertCache[key]
	entryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			entryAllColumns,
			entryColumnsWithDefault,
			entryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(entryType, entryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(entryType, entryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"entry\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"entry\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into entry")
	}

	if !cached {
		entryInsertCacheMut.Lock()
		entryInsertCache[key] = cache
		entryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Entry record using the global executor.
// See Update for more documentation.
func (o *Entry) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Entry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Entry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	entryUpdateCacheMut.RLock()
	cache, cached := entryUpdateCache[key]
	entryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			entryAllColumns,
			entryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update entry, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"entry\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, entryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(entryType, entryMapping, append(wl, entryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update entry row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for entry")
	}

	if !cached {
		entryUpdateCacheMut.Lock()
		entryUpdateCache[key] = cache
		entryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q entryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q entryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for entry")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EntrySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EntrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"entry\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, entryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in entry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all entry")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Entry) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Entry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no entry provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(entryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	entryUpsertCacheMut.RLock()
	cache, cached := entryUpsertCache[key]
	entryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			entryAllColumns,
			entryColumnsWithDefault,
			entryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			entryAllColumns,
			entryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert entry, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(entryPrimaryKeyColumns))
			copy(conflict, entryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"entry\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(entryType, entryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(entryType, entryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert entry")
	}

	if !cached {
		entryUpsertCacheMut.Lock()
		entryUpsertCache[key] = cache
		entryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Entry record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Entry) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Entry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Entry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Entry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), entryPrimaryKeyMapping)
	sql := "DELETE FROM \"entry\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for entry")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q entryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q entryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no entryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from entry")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for entry")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EntrySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EntrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(entryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"entry\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, entryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from entry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for entry")
	}

	if len(entryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Entry) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Entry provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Entry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEntry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EntrySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty EntrySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EntrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), entryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"entry\".* FROM \"entry\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, entryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EntrySlice")
	}

	*o = slice

	return nil
}

// EntryExistsG checks if the Entry row exists.
func EntryExistsG(ctx context.Context, iD string) (bool, error) {
	return EntryExists(ctx, boil.GetContextDB(), iD)
}

// EntryExists checks if the Entry row exists.
func EntryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"entry\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if entry exists")
	}

	return exists, nil
}
