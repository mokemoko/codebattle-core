// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Contest is an object representing the database table.
type Contest struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Owner       string      `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Repository  string      `boil:"repository" json:"repository" toml:"repository" yaml:"repository"`

	R *contestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContestColumns = struct {
	ID          string
	Owner       string
	Name        string
	Description string
	Repository  string
}{
	ID:          "id",
	Owner:       "owner",
	Name:        "name",
	Description: "description",
	Repository:  "repository",
}

var ContestTableColumns = struct {
	ID          string
	Owner       string
	Name        string
	Description string
	Repository  string
}{
	ID:          "contest.id",
	Owner:       "contest.owner",
	Name:        "contest.name",
	Description: "contest.description",
	Repository:  "contest.repository",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ContestWhere = struct {
	ID          whereHelperstring
	Owner       whereHelperstring
	Name        whereHelperstring
	Description whereHelpernull_String
	Repository  whereHelperstring
}{
	ID:          whereHelperstring{field: "\"contest\".\"id\""},
	Owner:       whereHelperstring{field: "\"contest\".\"owner\""},
	Name:        whereHelperstring{field: "\"contest\".\"name\""},
	Description: whereHelpernull_String{field: "\"contest\".\"description\""},
	Repository:  whereHelperstring{field: "\"contest\".\"repository\""},
}

// ContestRels is where relationship names are stored.
var ContestRels = struct {
	OwnerUser string
	Entries   string
	Matches   string
}{
	OwnerUser: "OwnerUser",
	Entries:   "Entries",
	Matches:   "Matches",
}

// contestR is where relationships are stored.
type contestR struct {
	OwnerUser *User      `boil:"OwnerUser" json:"OwnerUser" toml:"OwnerUser" yaml:"OwnerUser"`
	Entries   EntrySlice `boil:"Entries" json:"Entries" toml:"Entries" yaml:"Entries"`
	Matches   MatchSlice `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
}

// NewStruct creates a new relationship struct
func (*contestR) NewStruct() *contestR {
	return &contestR{}
}

func (r *contestR) GetOwnerUser() *User {
	if r == nil {
		return nil
	}
	return r.OwnerUser
}

func (r *contestR) GetEntries() EntrySlice {
	if r == nil {
		return nil
	}
	return r.Entries
}

func (r *contestR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.Matches
}

// contestL is where Load methods for each relationship are stored.
type contestL struct{}

var (
	contestAllColumns            = []string{"id", "owner", "name", "description", "repository"}
	contestColumnsWithoutDefault = []string{"id", "owner", "name", "repository"}
	contestColumnsWithDefault    = []string{"description"}
	contestPrimaryKeyColumns     = []string{"id"}
	contestGeneratedColumns      = []string{}
)

type (
	// ContestSlice is an alias for a slice of pointers to Contest.
	// This should almost always be used instead of []Contest.
	ContestSlice []*Contest
	// ContestHook is the signature for custom Contest hook methods
	ContestHook func(context.Context, boil.ContextExecutor, *Contest) error

	contestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contestType                 = reflect.TypeOf(&Contest{})
	contestMapping              = queries.MakeStructMapping(contestType)
	contestPrimaryKeyMapping, _ = queries.BindMapping(contestType, contestMapping, contestPrimaryKeyColumns)
	contestInsertCacheMut       sync.RWMutex
	contestInsertCache          = make(map[string]insertCache)
	contestUpdateCacheMut       sync.RWMutex
	contestUpdateCache          = make(map[string]updateCache)
	contestUpsertCacheMut       sync.RWMutex
	contestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contestAfterSelectHooks []ContestHook

var contestBeforeInsertHooks []ContestHook
var contestAfterInsertHooks []ContestHook

var contestBeforeUpdateHooks []ContestHook
var contestAfterUpdateHooks []ContestHook

var contestBeforeDeleteHooks []ContestHook
var contestAfterDeleteHooks []ContestHook

var contestBeforeUpsertHooks []ContestHook
var contestAfterUpsertHooks []ContestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Contest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Contest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Contest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Contest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Contest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Contest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Contest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Contest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Contest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContestHook registers your hook function for all future operations.
func AddContestHook(hookPoint boil.HookPoint, contestHook ContestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contestAfterSelectHooks = append(contestAfterSelectHooks, contestHook)
	case boil.BeforeInsertHook:
		contestBeforeInsertHooks = append(contestBeforeInsertHooks, contestHook)
	case boil.AfterInsertHook:
		contestAfterInsertHooks = append(contestAfterInsertHooks, contestHook)
	case boil.BeforeUpdateHook:
		contestBeforeUpdateHooks = append(contestBeforeUpdateHooks, contestHook)
	case boil.AfterUpdateHook:
		contestAfterUpdateHooks = append(contestAfterUpdateHooks, contestHook)
	case boil.BeforeDeleteHook:
		contestBeforeDeleteHooks = append(contestBeforeDeleteHooks, contestHook)
	case boil.AfterDeleteHook:
		contestAfterDeleteHooks = append(contestAfterDeleteHooks, contestHook)
	case boil.BeforeUpsertHook:
		contestBeforeUpsertHooks = append(contestBeforeUpsertHooks, contestHook)
	case boil.AfterUpsertHook:
		contestAfterUpsertHooks = append(contestAfterUpsertHooks, contestHook)
	}
}

// OneG returns a single contest record from the query using the global executor.
func (q contestQuery) OneG(ctx context.Context) (*Contest, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single contest record from the query.
func (q contestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Contest, error) {
	o := &Contest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for contest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Contest records from the query using the global executor.
func (q contestQuery) AllG(ctx context.Context) (ContestSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Contest records from the query.
func (q contestQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContestSlice, error) {
	var o []*Contest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Contest slice")
	}

	if len(contestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Contest records in the query using the global executor
func (q contestQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Contest records in the query.
func (q contestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count contest rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q contestQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q contestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if contest exists")
	}

	return count > 0, nil
}

// OwnerUser pointed to by the foreign key.
func (o *Contest) OwnerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Owner),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Entries retrieves all the entry's Entries with an executor.
func (o *Contest) Entries(mods ...qm.QueryMod) entryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"entry\".\"contest_id\"=?", o.ID),
	)

	return Entries(queryMods...)
}

// Matches retrieves all the match's Matches with an executor.
func (o *Contest) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match\".\"contest_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// LoadOwnerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contestL) LoadOwnerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContest interface{}, mods queries.Applicator) error {
	var slice []*Contest
	var object *Contest

	if singular {
		var ok bool
		object, ok = maybeContest.(*Contest)
		if !ok {
			object = new(Contest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContest))
			}
		}
	} else {
		s, ok := maybeContest.(*[]*Contest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contestR{}
		}
		args = append(args, object.Owner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contestR{}
			}

			for _, a := range args {
				if a == obj.Owner {
					continue Outer
				}
			}

			args = append(args, obj.Owner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(contestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerContests = append(foreign.R.OwnerContests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Owner == foreign.ID {
				local.R.OwnerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerContests = append(foreign.R.OwnerContests, local)
				break
			}
		}
	}

	return nil
}

// LoadEntries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contestL) LoadEntries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContest interface{}, mods queries.Applicator) error {
	var slice []*Contest
	var object *Contest

	if singular {
		var ok bool
		object, ok = maybeContest.(*Contest)
		if !ok {
			object = new(Contest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContest))
			}
		}
	} else {
		s, ok := maybeContest.(*[]*Contest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`entry`),
		qm.WhereIn(`entry.contest_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load entry")
	}

	var resultSlice []*Entry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice entry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on entry")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entry")
	}

	if len(entryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Entries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &entryR{}
			}
			foreign.R.Contest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContestID {
				local.R.Entries = append(local.R.Entries, foreign)
				if foreign.R == nil {
					foreign.R = &entryR{}
				}
				foreign.R.Contest = local
				break
			}
		}
	}

	return nil
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contestL) LoadMatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContest interface{}, mods queries.Applicator) error {
	var slice []*Contest
	var object *Contest

	if singular {
		var ok bool
		object, ok = maybeContest.(*Contest)
		if !ok {
			object = new(Contest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContest))
			}
		}
	} else {
		s, ok := maybeContest.(*[]*Contest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContest))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`match`),
		qm.WhereIn(`match.contest_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Contest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContestID {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Contest = local
				break
			}
		}
	}

	return nil
}

// SetOwnerUserG of the contest to the related item.
// Sets o.R.OwnerUser to related.
// Adds o to related.R.OwnerContests.
// Uses the global database handle.
func (o *Contest) SetOwnerUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetOwnerUser(ctx, boil.GetContextDB(), insert, related)
}

// SetOwnerUser of the contest to the related item.
// Sets o.R.OwnerUser to related.
// Adds o to related.R.OwnerContests.
func (o *Contest) SetOwnerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"contest\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"owner"}),
		strmangle.WhereClause("\"", "\"", 0, contestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Owner = related.ID
	if o.R == nil {
		o.R = &contestR{
			OwnerUser: related,
		}
	} else {
		o.R.OwnerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerContests: ContestSlice{o},
		}
	} else {
		related.R.OwnerContests = append(related.R.OwnerContests, o)
	}

	return nil
}

// AddEntriesG adds the given related objects to the existing relationships
// of the contest, optionally inserting them as new records.
// Appends related to o.R.Entries.
// Sets related.R.Contest appropriately.
// Uses the global database handle.
func (o *Contest) AddEntriesG(ctx context.Context, insert bool, related ...*Entry) error {
	return o.AddEntries(ctx, boil.GetContextDB(), insert, related...)
}

// AddEntries adds the given related objects to the existing relationships
// of the contest, optionally inserting them as new records.
// Appends related to o.R.Entries.
// Sets related.R.Contest appropriately.
func (o *Contest) AddEntries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Entry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContestID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"entry\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"contest_id"}),
				strmangle.WhereClause("\"", "\"", 0, entryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContestID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contestR{
			Entries: related,
		}
	} else {
		o.R.Entries = append(o.R.Entries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &entryR{
				Contest: o,
			}
		} else {
			rel.R.Contest = o
		}
	}
	return nil
}

// AddMatchesG adds the given related objects to the existing relationships
// of the contest, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Contest appropriately.
// Uses the global database handle.
func (o *Contest) AddMatchesG(ctx context.Context, insert bool, related ...*Match) error {
	return o.AddMatches(ctx, boil.GetContextDB(), insert, related...)
}

// AddMatches adds the given related objects to the existing relationships
// of the contest, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Contest appropriately.
func (o *Contest) AddMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContestID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"contest_id"}),
				strmangle.WhereClause("\"", "\"", 0, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContestID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contestR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Contest: o,
			}
		} else {
			rel.R.Contest = o
		}
	}
	return nil
}

// Contests retrieves all the records using an executor.
func Contests(mods ...qm.QueryMod) contestQuery {
	mods = append(mods, qm.From("\"contest\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"contest\".*"})
	}

	return contestQuery{q}
}

// FindContestG retrieves a single record by ID.
func FindContestG(ctx context.Context, iD string, selectCols ...string) (*Contest, error) {
	return FindContest(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindContest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Contest, error) {
	contestObj := &Contest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"contest\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from contest")
	}

	if err = contestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contestObj, err
	}

	return contestObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Contest) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Contest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contest provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contestInsertCacheMut.RLock()
	cache, cached := contestInsertCache[key]
	contestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contestAllColumns,
			contestColumnsWithDefault,
			contestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contestType, contestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contestType, contestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"contest\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"contest\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into contest")
	}

	if !cached {
		contestInsertCacheMut.Lock()
		contestInsertCache[key] = cache
		contestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Contest record using the global executor.
// See Update for more documentation.
func (o *Contest) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Contest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Contest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contestUpdateCacheMut.RLock()
	cache, cached := contestUpdateCache[key]
	contestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contestAllColumns,
			contestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update contest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"contest\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, contestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contestType, contestMapping, append(wl, contestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update contest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for contest")
	}

	if !cached {
		contestUpdateCacheMut.Lock()
		contestUpdateCache[key] = cache
		contestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q contestQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q contestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for contest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for contest")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ContestSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"contest\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contest")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Contest) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Contest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contest provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contestUpsertCacheMut.RLock()
	cache, cached := contestUpsertCache[key]
	contestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contestAllColumns,
			contestColumnsWithDefault,
			contestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			contestAllColumns,
			contestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert contest, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(contestPrimaryKeyColumns))
			copy(conflict, contestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"contest\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(contestType, contestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contestType, contestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert contest")
	}

	if !cached {
		contestUpsertCacheMut.Lock()
		contestUpsertCache[key] = cache
		contestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Contest record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Contest) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Contest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Contest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Contest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contestPrimaryKeyMapping)
	sql := "DELETE FROM \"contest\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from contest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for contest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q contestQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q contestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contest")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ContestSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"contest\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contest")
	}

	if len(contestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Contest) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Contest provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Contest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContestSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ContestSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"contest\".* FROM \"contest\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, contestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContestSlice")
	}

	*o = slice

	return nil
}

// ContestExistsG checks if the Contest row exists.
func ContestExistsG(ctx context.Context, iD string) (bool, error) {
	return ContestExists(ctx, boil.GetContextDB(), iD)
}

// ContestExists checks if the Contest row exists.
func ContestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"contest\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if contest exists")
	}

	return exists, nil
}
