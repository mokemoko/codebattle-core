/*
 * CodeBattle API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc    gin.HandlerFunc
	isAuthRequired bool
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	baseRouter := gin.Default()

	unauthorizedRouter, authorizedRouter := customRouter(baseRouter)

	for _, route := range routes {
		var router *gin.RouterGroup
		if route.isAuthRequired {
			router = authorizedRouter
		} else {
			router = unauthorizedRouter
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return baseRouter
}

var routes = Routes{
	{
		"GetContestById",
		http.MethodGet,
		"/contests/:contestId",
		GetContestById,
		false,
	},

	{
		"GetContests",
		http.MethodGet,
		"/contests",
		GetContests,
		false,
	},

	{
		"PutMatch",
		http.MethodPut,
		"/contests/:contestId/matches",
		PutMatch,
		true,
	},

	{
		"PostEntry",
		http.MethodPost,
		"/entries",
		PostEntry,
		true,
	},

	{
		"PutEntry",
		http.MethodPut,
		"/entries/:entryId",
		PutEntry,
		true,
	},

	{
		"GetMe",
		http.MethodGet,
		"/users/me",
		GetMe,
		true,
	},
}
