/*
 * CodeBattle API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"database/sql"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	_ "github.com/mattn/go-sqlite3"
	"github.com/volatiletech/sqlboiler/v4/boil"

	"github.com/markbates/goth"
	"github.com/markbates/goth/gothic"
	"github.com/markbates/goth/providers/github"

	sw "codebattle/server/api/go"
)

type Args struct {
	Port    string
	IsDebug bool
}

func parseArgs() Args {
	args := Args{}
	flag.StringVar(&args.Port, "port", "8081", "")
	flag.BoolVar(&args.IsDebug, "debug", false, "")
	flag.Parse()
	return args
}

func setupDatabase(args Args) error {
	db, err := sql.Open("sqlite3", "../sql/db.sqlite3")
	if err != nil {
		return err
	}
	if args.IsDebug {
		boil.DebugMode = true
	}
	boil.SetDB(db)
	return nil
}

func setupAuth(router *gin.Engine) {
	gothic.GetProviderName = func(req *http.Request) (string, error) {
		return "github", nil
	}
	goth.UseProviders(github.New(
		os.Getenv("GITHUB_CLIENT_KEY"),
		os.Getenv("GITHUB_CLIENT_SECRET"),
		os.Getenv("GITHUB_CALLBACK_URL"),
		"repo",
	))

	router.GET("/login", func(c *gin.Context) {
		gothic.BeginAuthHandler(c.Writer, c.Request)
	})
	router.GET("/callback", func(c *gin.Context) {
		user, err := gothic.CompleteUserAuth(c.Writer, c.Request)
		if err != nil {
			log.Fatal(err)
		}
		log.Printf("%+v", user)
		c.JSON(http.StatusOK, gin.H{
			"user": user,
		})
	})
}

func main() {
	args := parseArgs()

	if err := setupDatabase(args); err != nil {
		log.Fatal(err)
	}

	router := sw.NewRouter()

	// use temporary
	setupAuth(router)

	log.Printf("Server started")
	log.Fatal(router.Run(fmt.Sprintf(":%s", args.Port)))
}
