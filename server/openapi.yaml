openapi: 3.0.3
info:
  title: CodeBattle API
  version: 1.0.0
servers:
  - url: 'https'
paths:
  /users/me:
    get:
      operationId: getMe
      tags: [ users ]
      security:
        - cookieAuth: [ ]
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /contests:
    get:
      operationId: getContests
      tags: [ contests ]
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                  required: [ id, name ]
  /contests/{contestId}:
    get:
      operationId: getContestById
      tags: [ contests ]
      parameters:
        - name: contestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contest'
  /contests/{contestId}/matches:
    put:
      operationId: putMatch
      tags: [ contests ]
      security:
        - cookieAuth: [ ]
      parameters:
        - name: contestId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
  /entries:
    post:
      operationId: postEntry
      tags: [ entries ]
      security:
        - cookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
  /entries/{entryId}:
    put:
      operationId: putEntry
      tags: [ entries ]
      security:
        - cookieAuth: [ ]
      parameters:
        - name: entryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntryRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entry'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: tester
        icon:
          type: string
          example: https://gravatar.com/avatar/sample
      required: [ id, name ]
    Contest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        owner:
          $ref: '#/components/schemas/User'
        name:
          type: string
          example: Sample Game
        description:
          type: string
        recentMatches:
          type: array
          items:
            $ref: '#/components/schemas/Match'
        ranking:
          type: array
          items:
            $ref: '#/components/schemas/Entry'
      required: [ id, owner, name ]
    Match:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        entries:
          type: array
          items:
            $ref: '#/components/schemas/MatchEntry'
          minItems: 2
          maxItems: 4
      required: [ id, entries ]
    MatchEntry:
      type: object
      allOf:
        - $ref: '#/components/schemas/Entry'
        - properties:
            rank:
              type: integer
              minimum: 1
              maximum: 4
            beforeScore:
              type: integer
              minimum: 0
              maximum: 9999
            afterScore:
              type: integer
              minimum: 0
              maximum: 9999
      required: [ beforeScore ]
    Entry:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: bot example
          maxLength: 20
        user:
          $ref: '#/components/schemas/User'
        score:
          type: integer
          minimum: 0
          maximum: 9999
        repository:
          type: string
          format: url
        status:
          type: string
          enum:
            - processing
            - registered
            - error
        error:
          type: string
      required: [ id, name, user, score ]
    EntryRequest:
      type: object
      properties:
        contestId:
          type: string
          format: uuid
        name:
          type: string
          example: bot example
          maxLength: 20
        repository:
          type: string
          format: url
      required: [ contestId, name, repository ]

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JWT
